---
import BaseLayout from "../layouts/BaseLayout.astro";
import DarkVeil from "../components/Backgrounds/DarkVeil.jsx";
import "../styles/GlassContainer.css";

// 获取所有博客文章
const allPosts = await Astro.glob("./posts/*.md");

// 获取所有标签并计算数量
const tagCounts = {};
allPosts.forEach((post) => {
  post.frontmatter.tags.forEach((tag) => {
    tagCounts[tag] = (tagCounts[tag] || 0) + 1;
  });
});

const sortedTags = Object.keys(tagCounts).sort(
  (a, b) => tagCounts[b] - tagCounts[a]
);

// 将文章数据序列化为JSON，供客户端使用
const postsData = allPosts.map((post) => ({
  url: post.url,
  title: post.frontmatter.title,
  description: post.frontmatter.description,
  author: post.frontmatter.author,
  pubDate: post.frontmatter.pubDate,
  tags: post.frontmatter.tags,
  content: post.rawContent ? post.rawContent() : "",
}));
---

<BaseLayout pageTitle="搜索文章">
  <!-- DarkVeil 背景效果 -->
  <div
    style="width: 100%; height: 100vh; position: fixed; top: 0; left: 0; z-index: 0; pointer-events: none;"
  >
    <DarkVeil
      client:only="preact"
      dotSize={2}
      gap={15}
      baseColor="rgba(102,126,234,0.1)"
    />
  </div>

  <div class="search-page-container">
    <!-- 页面标题 -->
    <div class="page-header">
      <h1 class="page-title">搜索文章</h1>
      <p class="page-description">通过关键词、标签或日期搜索博客文章</p>
    </div>

    <div class="search-layout">
      <!-- 左侧搜索和结果栏 -->
      <div class="search-and-results">
        <!-- 搜索区域 -->
        <div class="search-sidebar">
          <div class="search-section">
            <h2 class="section-title">
              <svg
                class="section-icon"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
              搜索文章
            </h2>

            <!-- 统一搜索框 -->
            <div class="search-group">
              <label for="keyword-search"></label>
              <div class="search-input-wrapper">
                <input
                  type="text"
                  id="keyword-search"
                  placeholder="输入关键词或标签搜索文章..."
                  class="search-input"
                />
                <svg
                  class="search-icon"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
              </div>
              <div class="search-hint">💡 可以搜索标题、内容、标签等</div>
            </div>
          </div>
        </div>

        <!-- 搜索结果区域 -->
        <div class="search-results">
          <div class="results-header">
            <h3 id="results-title">搜索结果</h3>
            <span id="results-count" class="results-count"
              >共 {allPosts.length} 篇文章</span
            >
          </div>

          <div id="results-container" class="results-container">
            {
              allPosts.map((post, index) => (
                <article
                  class="result-item fadeInUp"
                  style={`animation-delay: ${index * 0.1}s`}
                >
                  <h3 class="result-title">
                    <a href={post.url}>{post.frontmatter.title}</a>
                  </h3>
                  <p class="result-meta">
                    📅 {post.frontmatter.pubDate.toString().slice(0, 10)} | 👤{" "}
                    {post.frontmatter.author}
                  </p>
                  <p class="result-description">
                    {post.frontmatter.description}
                  </p>
                  <div class="result-tags">
                    {post.frontmatter.tags.map((tag) => (
                      <span class="result-tag" data-tag={tag}>
                        #{tag}
                      </span>
                    ))}
                  </div>
                </article>
              ))
            }
          </div>
        </div>
      </div>

      <!-- 右侧标签栏 -->
      <div class="tags-sidebar">
        <div class="tags-section">
          <div class="tags-header">
            <h2 class="section-title">
              <svg
                class="section-icon"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"
                ></path>
                <line x1="7" y1="7" x2="7.01" y2="7"></line>
              </svg>
              热门标签
            </h2>
            <a href="/tags" class="view-all-link">View All</a>
          </div>

          <div class="tags-cloud">
            {
              sortedTags.map((tag, index) => (
                <button
                  class="tag-pill clickable-tag"
                  data-tag={tag}
                  style={`animation-delay: ${index * 0.05}s`}
                >
                  {tag}
                  <span class="tag-count">({tagCounts[tag]})</span>
                </button>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 将文章数据传递给客户端 -->
  <script define:vars={{ postsData }}>
    window.postsData = postsData;
  </script>

  <script>
    // 搜索功能实现
    class SearchEngine {
      constructor() {
        this.posts = window.postsData || [];
        this.searchTimeout = null;
        this.initializeElements();
        this.bindEvents();
        this.parseURLParams();
        // 初始显示所有文章
        this.displayResults(this.posts);
      }

      initializeElements() {
        this.keywordInput = document.getElementById("keyword-search");
        this.resultsContainer = document.getElementById("results-container");
        this.resultsTitle = document.getElementById("results-title");
        this.resultsCount = document.getElementById("results-count");
        this.tagPills = document.querySelectorAll(".clickable-tag");
      }

      bindEvents() {
        // 回车键搜索
        this.keywordInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") this.performSearch();
        });

        // 标签点击事件
        this.tagPills.forEach((pill) => {
          pill.addEventListener("click", (e) => {
            const tag = e.currentTarget.dataset.tag;
            this.keywordInput.value = tag;
            this.performSearch();
          });
        });

        // 实时搜索（可选）
        this.keywordInput.addEventListener("input", () => {
          clearTimeout(this.searchTimeout);
          this.searchTimeout = setTimeout(() => this.performSearch(), 500);
        });
      }

      parseURLParams() {
        const urlParams = new URLSearchParams(window.location.search);
        const query = urlParams.get("q");
        if (query) {
          this.keywordInput.value = query;
          this.performSearch();
        }
      }

      performSearch() {
        if (!this.keywordInput) {
          console.error("Search input not found");
          return;
        }

        const keyword = this.keywordInput.value.toLowerCase().trim();
        console.log("Searching for:", keyword);
        console.log("Available posts:", this.posts.length);

        let filteredPosts = this.posts.filter((post) => {
          if (!keyword) return true;

          // 搜索标题、描述、内容和标签
          const searchText =
            `${post.title} ${post.description} ${post.content || ""} ${post.tags.join(" ")}`.toLowerCase();
          const matches = searchText.includes(keyword);
          if (matches) {
            console.log("Found match:", post.title);
          }
          return matches;
        });

        console.log("Filtered posts:", filteredPosts.length);
        this.displayResults(filteredPosts);
        this.updateURL();
      }

      displayResults(posts) {
        if (!this.resultsCount || !this.resultsContainer) {
          console.error("Results elements not found");
          return;
        }

        this.resultsCount.textContent = `共 ${posts.length} 篇文章`;

        if (posts.length === 0) {
          this.resultsContainer.innerHTML = `
            <div class="no-results">
              <svg class="no-results-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
              </svg>
              <h3>没有找到相关文章</h3>
              <p>尝试调整搜索条件或清空重新搜索</p>
            </div>
          `;
          return;
        }

        this.resultsContainer.innerHTML = posts
          .map(
            (post, index) => `
          <article class="result-item fadeInUp" style="animation-delay: ${index * 0.1}s">
            <h3 class="result-title">
              <a href="${post.url}">${post.title}</a>
            </h3>
            <div class="result-meta">
              <span>📅 ${post.pubDate.toString().slice(0, 10)}</span>
              <span>👤 ${post.author}</span>
            </div>
            <p class="result-description">${post.description}</p>
            <div class="result-tags">
              ${post.tags.map((tag) => `<span class="result-tag" data-tag="${tag}">#${tag}</span>`).join("")}
            </div>
          </article>
        `
          )
          .join("");

        // 为结果中的标签添加点击事件
        setTimeout(() => {
          this.resultsContainer
            .querySelectorAll(".result-tag")
            .forEach((tag) => {
              tag.addEventListener("click", (e) => {
                e.preventDefault();
                e.stopPropagation();
                const tagName = e.currentTarget.dataset.tag;
                this.keywordInput.value = tagName;
                this.performSearch();
              });
            });
        }, 100);
      }

      clearSearch() {
        this.keywordInput.value = "";
        this.displayResults(this.posts);
        this.updateURL();
      }

      updateURL() {
        const params = new URLSearchParams();
        const keyword = this.keywordInput.value.trim();

        if (keyword) params.set("q", keyword);

        const newURL = params.toString()
          ? `${window.location.pathname}?${params.toString()}`
          : window.location.pathname;

        window.history.replaceState({}, "", newURL);
      }
    }

    // 初始化搜索引擎
    document.addEventListener("DOMContentLoaded", () => {
      new SearchEngine();
    });
  </script>
</BaseLayout>

<style>
  .search-page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .page-description {
    font-size: 1.1rem;
    color: rgba(255, 255, 255, 0.7);
    margin: 0;
  }

  html.dark .page-description {
    color: rgba(255, 255, 255, 0.7);
  }

  .search-layout {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    margin-bottom: 3rem;
  }

  /* 左侧搜索和结果区域 */
  .search-and-results {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  /* 搜索栏样式 */
  .search-sidebar {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 1rem;
    padding: 1.5rem;
  }

  html.dark .search-sidebar {
    background: rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.1);
  }

  /* 标签栏样式 */
  .tags-sidebar {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 1rem;
    padding: 1.5rem;
    height: fit-content;
    position: sticky;
    top: 2rem;
  }

  .tags-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .view-all-link {
    color: #667eea;
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: color 0.3s ease;
  }

  .view-all-link:hover {
    color: #764ba2;
    text-decoration: underline;
  }

  html.dark .view-all-link {
    color: #8b9dc3;
  }

  html.dark .view-all-link:hover {
    color: #667eea;
  }

  html.dark .tags-sidebar {
    background: rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.1);
  }

  .search-actions {
    display: flex;
    gap: 0.75rem;
    margin-top: 2rem;
  }

  .search-button,
  .clear-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .search-button:hover,
  .clear-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .clear-button {
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-color);
  }

  .clear-button:hover {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 12px rgba(255, 255, 255, 0.1);
  }

  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-color);
    margin: 0 0 1rem 0;
  }

  .section-icon {
    width: 20px;
    height: 20px;
    color: #667eea;
  }

  .tag-pill {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem 0.75rem;
    background: rgba(102, 126, 234, 0.2);
    color: var(--text-color);
    border: 1px solid rgba(102, 126, 234, 0.3);
    border-radius: 1rem;
    font-size: 0.8rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
    margin: 0.25rem;
    opacity: 0;
    animation: fadeInUp 0.6s ease forwards;
  }

  .tag-pill:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
  }

  html.dark .tag-pill:hover {
    background: rgba(255, 255, 255, 0.08);
  }

  .clickable-tag:hover {
    background: rgba(102, 126, 234, 0.3);
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateY(-2px);
  }

  .result-title {
    margin: 0 0 0.75rem 0;
  }

  .result-title a {
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .result-title a:hover {
    color: #667eea;
  }

  .result-meta {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .result-title {
    margin: 0 0 0.75rem 0;
    font-size: 1.5rem;
    font-weight: 600;
    line-height: 1.3;
  }

  .result-title a {
    color: white;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .result-item:hover .result-title a {
    color: #667eea;
  }

  .result-description {
    line-height: 1.6;
    margin-bottom: 1rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .result-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-top: 1rem;
  }

  .result-tag {
    padding: 0.25rem 0.75rem;
    background: rgba(102, 126, 234, 0.2);
    color: #667eea;
    border-radius: 15px;
    font-size: 0.8rem;
    border: 1px solid rgba(102, 126, 234, 0.3);
    transition: all 0.3s ease;
    display: inline-block;
    cursor: pointer;
  }

  .result-tag:hover {
    background: rgba(102, 126, 234, 0.3);
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateY(-1px);
  }

  .result-item {
    background: rgba(255, 255, 255, 0.08);
    backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 15px;
    padding: 2rem;
    margin-bottom: 2rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    cursor: pointer;
  }

  .result-item.fadeInUp {
    opacity: 0;
    animation: fadeInUp 0.6s ease forwards;
  }

  .result-item:hover {
    background: rgba(255, 255, 255, 0.12);
    border-color: rgba(255, 255, 255, 0.25);
    transform: translateY(-5px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
  }

  .search-input-wrapper {
    position: relative;
    width: 100%;
  }

  .search-input {
    width: 100%;
    padding: 16px 50px 16px 20px;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(20px);
    color: var(--text-color);
    font-size: 16px;
    font-weight: 400;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }

  .search-input:focus {
    outline: none;
    border-color: rgba(var(--accent-rgb), 0.6);
    background: rgba(0, 0, 0, 0.4);
    box-shadow:
      0 12px 40px rgba(0, 0, 0, 0.4),
      0 0 0 1px rgba(var(--accent-rgb), 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
  }

  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
    font-weight: 300;
  }

  .search-icon {
    position: absolute;
    right: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: rgba(255, 255, 255, 0.6);
    pointer-events: none;
    transition: color 0.3s ease;
  }

  .search-input:focus + .search-icon {
    color: rgba(var(--accent-rgb), 0.8);
  }

  .search-hint {
    margin-top: 8px;
    font-size: 12px;
    color: rgba(255, 255, 255, 0.4);
    text-align: center;
    font-weight: 300;
  }

  /* 无结果样式 */
  .no-results {
    text-align: center;
    padding: 3rem;
    color: rgba(255, 255, 255, 0.7);
  }

  .no-results-icon {
    width: 48px;
    height: 48px;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  .no-results h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--text-color);
  }

  .no-results p {
    font-size: 1rem;
    opacity: 0.8;
  }

  /* 动画 */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .search-layout {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .search-and-results {
      order: 2;
    }

    .tags-sidebar {
      order: 1;
      position: static;
    }
  }

  @media (max-width: 768px) {
    .search-page-container {
      padding: 1rem;
    }

    .page-title {
      font-size: 2rem;
    }

    .search-actions {
      flex-direction: column;
    }

    .results-header {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }

    .result-item {
      padding: 1rem;
    }
  }
</style>
